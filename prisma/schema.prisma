generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SocialMediaPost {
  id                       String                 @id @default(cuid())
  post                     Post                   @relation(fields: [postId], references: [id])
  postId                   String
  socialMedia              SocialMedia
  socialMediaIntegrationId String
  socialMediaIntegration   SocialMediaIntegration @relation(fields: [socialMediaIntegrationId], references: [id])
  socialMediaPostId        String?
  failedReason             String?
  postedAt                 DateTime?
  failedAt                 DateTime?
  permalink                String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  xCommunityId             String?
  xShareWithFollowers      Boolean?               @default(true)
}

model Post {
  id               String            @id @default(cuid())
  description      String
  postType         PostType
  images           File[]            @relation("PostImages")
  video            File?             @relation("PostVideo", fields: [videoId], references: [id])
  videoId          String?           @unique
  videoCover       File?             @relation("PostVideoCover", fields: [videoCoverId], references: [id])
  videoCoverId     String?           @unique
  scheduledAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  teamId           String
  team             Team              @relation(fields: [teamId], references: [id])
  socialMediaPosts SocialMediaPost[]
  archived         Boolean           @default(false)
  archivedAt       DateTime?
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String        @unique
  emailVerified        DateTime?
  password             String?
  sidebarOpen          Boolean       @default(true)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  avatarId             String?       @unique
  avatar               File?         @relation(fields: [avatarId], references: [id])
  teamId               String?
  team                 Team?         @relation("SelectedTeam", fields: [teamId], references: [id])
  ownedTeams           Team[]        @relation("TeamOwner")
  teams                Team[]        @relation("TeamMembers")
  invitationsInvitedBy Invitation[]  @relation("InvitationInvitedBy")
  invitationsReceived  Invitation[]  @relation("InvitationInvitedUser")
  subscription         Subscription?
}

model Team {
  id                      String                   @id @default(cuid())
  name                    String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  ownerId                 String
  owner                   User                     @relation("TeamOwner", fields: [ownerId], references: [id])
  members                 User[]                   @relation("TeamMembers")
  selectedUsers           User[]                   @relation("SelectedTeam")
  invitations             Invitation[]
  posts                   Post[]
  brands                  Brand[]
  socialMediaIntegrations SocialMediaIntegration[]
}

model Invitation {
  id            String           @id @default(cuid())
  email         String
  status        InvitationStatus @default(pending)
  teamId        String
  team          Team             @relation(fields: [teamId], references: [id])
  invitedById   String
  invitedBy     User             @relation("InvitationInvitedBy", fields: [invitedById], references: [id])
  invitedUserId String?
  invitedUser   User?            @relation("InvitationInvitedUser", fields: [invitedUserId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([email])
  @@index([teamId])
  @@index([invitedUserId])
}

enum InvitationStatus {
  pending
  accepted
  declined
  canceled
}

model SocialMediaIntegration {
  id                    String            @id @default(cuid())
  socialMedia           SocialMedia
  accessToken           String
  accessTokenExpiresAt  DateTime
  refreshToken          String
  refreshTokenExpiresAt DateTime?
  brandId               String?
  brand                 Brand?            @relation(fields: [brandId], references: [id])
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  teamId                String
  team                  Team              @relation(fields: [teamId], references: [id])
  accountId             String
  accountName           String
  accountUsername       String?
  accountAvatarUrl      String?
  socialMediaPosts      SocialMediaPost[]
  xCommunities          XCommunity[]

  @@unique([socialMedia, accountId, teamId])
}

model XCommunity {
  id                       String                 @id @default(cuid())
  xId                      String
  name                     String
  socialMediaIntegrationId String
  socialMediaIntegration   SocialMediaIntegration @relation(fields: [socialMediaIntegrationId], references: [id])
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@unique([socialMediaIntegrationId, xId])
}

model Brand {
  id                      String                   @id @default(cuid())
  name                    String
  socialMediaIntegrations SocialMediaIntegration[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  teamId                  String
  team                    Team                     @relation(fields: [teamId], references: [id])
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
}

enum SocialMedia {
  INSTAGRAM
  YOUTUBE
  TUMBLR
  PINTEREST
  THREADS
  TIKTOK
  X
  FACEBOOK
  LINKEDIN
}

enum SubscriptionTier {
  STARTER
  GROWTH
  SCALE
}

enum SubscriptionBillingInterval {
  monthly
  yearly
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model File {
  id             String   @id @default(cuid())
  mimeType       String
  size           Int
  path           String
  createdAt      DateTime @default(now())
  user           User?
  postImages     Post?    @relation("PostImages", fields: [postId], references: [id])
  postId         String?
  postVideo      Post?    @relation("PostVideo")
  postVideoCover Post?    @relation("PostVideoCover")
}

model Subscription {
  id                   String                       @id @default(cuid())
  userId               String                       @unique
  user                 User                         @relation(fields: [userId], references: [id])
  stripeCustomerId     String?                      @unique
  stripeSubscriptionId String?                      @unique
  status               SubscriptionStatus?
  subscriptionTier     SubscriptionTier?
  billingInterval      SubscriptionBillingInterval?
  cancelAtPeriodEnd    Boolean                      @default(false)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
}
