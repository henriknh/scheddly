generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SocialMediaPost {
  id                    String              @id @default(cuid())
  post                  Post                @relation(fields: [postId], references: [id])
  postId                String
  socialMediaIntegration SocialMediaIntegration @relation(fields: [socialMediaIntegrationId], references: [id])
  socialMediaIntegrationId String
  socialMediaPostId     String?
  failedReason          String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Post {
  id               String            @id @default(cuid())
  description      String
  postType         PostType
  imageUrls        String[]          @default([])
  videoUrl         String?
  videoCoverUrl    String?
  scheduledAt      DateTime?
  postedAt         DateTime?
  failedAt         DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  teamId           String
  team             Team              @relation(fields: [teamId], references: [id])
  socialMediaPosts SocialMediaPost[]
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  avatarUrl            String?
  teamId               String?
  team                 Team?     @relation("TeamMember", fields: [teamId], references: [id])
  ownedTeam            Team?     @relation("TeamOwner")
}

model Team {
  id                      String                  @id @default(cuid())
  name                    String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  ownerId                 String                  @unique
  owner                   User                    @relation("TeamOwner", fields: [ownerId], references: [id])
  members                 User[]                  @relation("TeamMember")
  posts                   Post[]
  brands                  Brand[]
  socialMediaIntegrations SocialMediaIntegration[]
}

model SocialMediaIntegration {
  id                                String      @id @default(cuid())
  socialMedia                       SocialMedia
  token                             Token      @relation(fields: [tokenId], references: [id])
  tokenId                           String     @unique
  brandId                           String?
  brand                             Brand?      @relation(fields: [brandId], references: [id])
  createdAt                         DateTime    @default(now())
  updatedAt                         DateTime    @updatedAt
  teamId                            String
  team                              Team        @relation(fields: [teamId], references: [id])
  socialMediaIntegrationAccountInfo SocialMediaIntegrationAccountInfo? @relation(fields: [socialMediaIntegrationAccountInfoId], references: [id])
  socialMediaIntegrationAccountInfoId String?    @unique
  socialMediaPosts                  SocialMediaPost[]
}

model SocialMediaIntegrationAccountInfo {
  id                    String      @id @default(cuid())
  accountId             String
  name                  String
  avatarUrl             String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  socialMediaIntegration SocialMediaIntegration?
}

model Token {
  id                    String      @id @default(cuid())
  accessToken           String
  accessTokenExpiresAt  DateTime
  refreshToken          String
  refreshTokenExpiresAt DateTime
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  socialMediaIntegration SocialMediaIntegration?
}

model Brand {
  id                      String                  @id @default(cuid())
  name                    String
  socialMediaIntegrations SocialMediaIntegration[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  teamId                  String
  team                    Team                    @relation(fields: [teamId], references: [id])
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
}

enum SocialMedia {
  INSTAGRAM
  YOUTUBE
  TUMBLR
  PINTEREST
  THREADS
  TIKTOK
  X
  FACEBOOK
  LINKEDIN
}
